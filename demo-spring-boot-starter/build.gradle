buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:5.0.3"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

group 'com.starter'
version '1.0.1-SNAPSHOT'

//buildscript {
//    ext {
//        springBootVersion = '2.1.1.RELEASE'
//    }
//    repositories {
//        mavenCentral()
//    }
//    dependencies {
//        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//    }
//}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'nebula.optional-base'
//apply plugin: 'optional-base'
apply plugin: "com.jfrog.bintray"
apply plugin: "com.jfrog.artifactory"

//apply plugin: 'org.springframework.boot'

archivesBaseName="demo-spring-boot-starter"

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal() // 使用本地仓库
    mavenCentral()
}

//// 指定上传的路径
def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/').absolutePath
//
//// 上传Task，Gradle会生成并上传pom.xml文件。
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: localMavenRepo)
//
//            //构造项目的Pom文件
//            pom.project {
//                name = project.name
//                packaging = 'jar'
//                description = 'description'
//            }
//        }
//    }
//}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: localMavenRepo)
    }
}

//configurations {
//    optional
////    compile.extendsFrom optional
//}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.2.5.RELEASE'
    compileOnly group: 'com.alibaba', name: 'fastjson', version: '1.2.67'
//    optional group: 'com.alibaba', name: 'fastjson', version: '1.2.67'
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.2.5.RELEASE'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'


    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//publishing {
//    publications {
//        maven( MavenPublication ) {
//            from components.java
//
//            pom.withXml {
//                asNode().dependencies.dependency.findAll { xmlDep ->
//                    // mark optional dependencies
//                    if ( project.configurations.optional.allDependencies.findAll { dep ->
//                        xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
//                    } ) {
//                        def xmlOptional = xmlDep.optional[ 0 ];
//                        if ( !xmlOptional ) {
//                            xmlOptional = xmlDep.appendNode( 'optional' )
//                        }
//                        xmlOptional.value = 'true';
//                    }
//
//                    // fix maven-publish issue when all maven dependencies are placed into runtime scope
//                    if ( project.configurations.compile.allDependencies.findAll { dep ->
//                        xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
//                    } ) {
//                        def xmlScope = xmlDep.scope[ 0 ];
//                        if ( !xmlScope ) {
//                            xmlScope = xmlDep.appendNode( 'scope' )
//                        }
//                        xmlScope.value = 'compile';
//                    }
//                }
//            }
//        }
//    }
//}

//install {
//    repositories.mavenInstaller{
//        pom.groupId = 'com.starter'
//        pom.artifactId = 'demo-spring-boot-starter'
//        pom.version = '1.0.0-SNAPSHOT'
//    }
//}
